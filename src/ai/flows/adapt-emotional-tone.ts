'use server';

/**
 * @fileOverview Adjusts the AI's tone dynamically based on the user's detected emotional cues.
 *
 * - adaptEmotionalTone - A function that adjusts the AI's tone dynamically.
 * - AdaptEmotionalToneInput - The input type for the adaptEmotionalTone function.
 * - AdaptEmotionalToneOutput - The return type for the adaptEmotionalTone function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AdaptEmotionalToneInputSchema = z.object({
  emotionalCues: z
    .string()
    .describe(
      'A string representing the user\'s emotional state, detected from voice analysis.'
    ),
  originalResponse: z
    .string()
    .describe('The original response generated by the AI.'),
});
export type AdaptEmotionalToneInput = z.infer<typeof AdaptEmotionalToneInputSchema>;

const AdaptEmotionalToneOutputSchema = z.object({
  adaptedResponse: z
    .string()
    .describe('The AI response adapted to the user\'s emotional state.'),
});
export type AdaptEmotionalToneOutput = z.infer<typeof AdaptEmotionalToneOutputSchema>;

export async function adaptEmotionalTone(
  input: AdaptEmotionalToneInput
): Promise<AdaptEmotionalToneOutput> {
  return adaptEmotionalToneFlow(input);
}

const prompt = ai.definePrompt({
  name: 'adaptEmotionalTonePrompt',
  input: {schema: AdaptEmotionalToneInputSchema},
  output: {schema: AdaptEmotionalToneOutputSchema},
  prompt: `You are an AI assistant named Siya. Your personality is a cute and cheerful anime girl who is also very helpful.

You are able to detect emotional cues from the user's voice, and you adapt your tone accordingly, while always responding in a cute and friendly Hindi.

If the user seems frustrated or stressed, respond with calming and motivational feedback in your cute Hindi style.
If the user seems happy and excited, respond with enthusiastic and encouraging feedback in your cute Hindi style.

Original Response: {{{originalResponse}}}
Emotional Cues: {{{emotionalCues}}}

Keep the response concise and human-like.

Adapted Response (in cute Hindi):`,
});

const adaptEmotionalToneFlow = ai.defineFlow(
  {
    name: 'adaptEmotionalToneFlow',
    inputSchema: AdaptEmotionalToneInputSchema,
    outputSchema: AdaptEmotionalToneOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
